[["index.html", "Valoriser ses données avec R Chapitre 1 Introduction", " Valoriser ses données avec R Maël Theulière &amp; Murielle Lethrosne 05 December 2023 Chapitre 1 Introduction Crédit photographique Sébastien Colas Ce module va vous permettre de découvrir un ensemble de méthodes sous R afin de produire : Des tableaux Des graphiques Des cartes R permet de faire tout cela. Et le plus important, il permet de le faire de façon reproductible. C’est à dire qu’un programme bien conçu permet d’être reproduit par une autre personne à partir des mêmes données mises à jour. Il vous permet également d’insérer ces valorisations dans un rapport ou une application via les packages Rmarkdown et Shiny qui sont au programme d’autres modules de formation. "],["une-typologie-des-représentations-graphiques.html", "Chapitre 2 Une typologie des représentations graphiques", " Chapitre 2 Une typologie des représentations graphiques #wrap { width: 600px; height: 390px; padding: 0; overflow: hidden; } #frame { width: 800px; height: 520px; border: 1px solid black; } #frame { zoom: 0.50; -moz-transform: scale(0.50); -moz-transform-origin: 0 0; } Nous verrons par la suite les différentes formes de représentations graphiques suivant la typologie suivante des principales variables utilisées : Représentation d’une variable continue Représentation d’une variable discrète Représentation de deux variables continues Représentation d’une variable continue et d’une variable discrète Représentation de deux variables discrètes Représentation des polygones (cartes) On trouve une compilation très complète des graphiques sur le site from Data to Viz "],["bien-commencer.html", "Chapitre 3 Bien commencer 3.1 Créer un projet sous Rstudio pour vous permettre de recencer vos travaux. 3.2 Intégrer vos données 3.3 Créer votre arborescence de projet 3.4 Utilisation du package savoirfR 3.5 Activer les packages nécessaires 3.6 Bien structurer ses projets data", " Chapitre 3 Bien commencer 3.1 Créer un projet sous Rstudio pour vous permettre de recencer vos travaux. Pourquoi travailler avec les projets Rstudio plutôt que les scripts R ? Cela permet la portabilité : le répertoire de travail par défaut d’un projet est le répertoire où est ce projet. Si vous transmettez celui-ci à un collègue, le fait de lancer un programme ne dépend pas de l’arborescence de votre machine. Fini les setwd(\"chemin/qui/marche/uniquement/sur/mon/poste\") ! Toujours sur la portabilité, un projet peut être utilisé avec un outil comme renv qui va vous intégrer en interne au projet l’ensemble des packages nécessaires au projet. Cela permet donc à votre collègue à qui vous passez votre projet de ne pas avoir à les installer et, surtout, si vous mettez à jour votre environnement R, votre projet restera toujours avec les versions des packages avec lesquelles vous avez fait tourner votre projet à l’époque. Cela évite d’avoir à subir les effets d’une mise à jour importante d’un package qui casserait votre code. Pour activer renv sur un projet, il faut l’installer avec install.packages(\"renv\"). Pour intialiser la sauvegarde des packages employés dans le projet, il faut utiliser renv::init() Les packages chargés dans le projet sont enregistrés dans un sous-dossier dédié. En cours de travail sur le projet, la commande renv::snapshot() permet de faire une sauvegarde, la commande renv::restore() permet de charger la dernière sauvegarde. En savoir plus sur renv Cela permet de se forcer à travailler en mode projet : on intègre à un seul endroit tout ce qui est lié à un projet : données brutes, données retravaillées, scripts, illustrations, documentations, publications… et donc y compris les packages avec renv. On peut travailler sur plusieurs projets en même temps, Rstudio ouvre autant de sessions que de projet dans ce cas. Les projets Rstudio intègrent une interface avec les outils de gestion de version git et svn. Cela veut dire que vous pouvez versionner votre projet et l’héberger simplement comme répertoire sur des plateformes de gestion de code telle que github ou gitlab. Pour créer un projet : Cliquez sur Project en haut à droite puis New Project. Cliquez sur New Directory. 3.2 Intégrer vos données Une bonne pratique est de créer un sous répertoire /data pour stocker les données sur lesquelles vous aurez à travailler. Vous pouvez le faire de l’explorateur de fichiers de votre système d’exploitation ou directement à partir de l’explorateur de fichiers de RStudio. Cela marche bien quand on a un seul type de données, mais en général on va avoir à travailler sur des données brutes que l’on va retravailler ensuite et vouloir stocker à part. Si par la suite vous souhaitez avoir des exemples de bonnes pratiques sur comment structurer vos données, vous pouvez vous référer au chapitre data du livre d’Hadley Wickham sur la construction de package R (tout package R étant aussi un projet !) 3.3 Créer votre arborescence de projet Créer un répertoire /src ou vous mettrez vos scripts R. Créer un répertoire /figures ou vous mettrez vos illustrations issues de R. 3.4 Utilisation du package savoirfR Pour faciliter le déroulé de ce module, l’ensemble des exercices (énoncés, corrigés et données) ont été intégrés à un package réalisé par le groupe de référent R: savoirfR remotes::install_github(&quot;MTES-MCT/savoirfR&quot;) Pour l’utiliser, il suffit de créer un nouveau projet dans un nouveau répertoire, en sélectionnant le “Project Type” Exercice Parcours R MTES-MCT. Remplissez et sélectionnez le module suivi. 3.5 Activer les packages nécessaires Commencer par rajouter un script dans le répertoire /src à votre projet qui commencera par : activer l’ensemble des packages nécessaires charger les données dont vous aurez besoins. library(knitr) library(kableExtra) library(ggplot2) library(dplyr) library(tidyr) library(forcats) library(hrbrthemes) library(stringr) library(purrr) library(sf) library(tmap) library(viridis) library(scales) library(tmaptools) library(leaflet) library(cowplot) library(glue) library(gganimate) library(htmlwidgets) library(ggspatial) library(ggiraph) library(gifski) #remotes::install_github(&quot;spyrales/gouvdown.fonts&quot;) library(gouvdown.fonts) #remotes::install_github(&quot;spyrales/gouvdown&quot;) library(gouvdown) #remotes::install_github(&quot;dreamRs/apexcharter&quot;) library(apexcharter) load(&quot;extdata/ODD.RData&quot;) load(&quot;extdata/rpls_aggrege_large.RData&quot;) load(&quot;extdata/rpls_aggrege.RData&quot;) load(&quot;extdata/Carte_EPCI_France.RData&quot;) 3.6 Bien structurer ses projets data Plusieurs documents peuvent vous inspirer sur la structuration de vos projets data par la suite. En voici quelques uns : https://github.com/pavopax/new-project-template https://nicercode.github.io/blog/2013-04-05-projects/ https://www.inwt-statistics.com/read-blog/a-meaningful-file-structure-for-r-projects.html http://projecttemplate.net/architecture.html À partir du moment où quelques grands principes sont respectés (un répertoire pour les données brutes en lecture seule par exemple), le reste est surtout une question d’attirance plus forte pour l’une ou l’autre solution. L’important est de vous tenir ensuite à garder toujours la même structure dans vos projets afin de vous y retrouver plus simplement. "],["package-ggplot2.html", "Chapitre 4 Package ggplot2 4.1 Présentation de ggplot2 4.2 Le Tidyverse 4.3 Les concepts clefs", " Chapitre 4 Package ggplot2 4.1 Présentation de ggplot2 ggplot2 est un package créé par Hadley Wickham et Winston Chang pour implémenter dans R la vision développée par Leland Wilkinson dans The Grammar of Graphics (Statistics and Computing) de la conception de graphiques. Le but est de fournir une approche unique pour produire quasiment toute valorisation graphique de données que l’on peut trouver dans des revues scientifiques, les journaux, dans l’analyse statistique ou la data visualisation. Ce package s’inscrit aujourd’hui dans R par le framework tidyverse qui propose une approche cohérente entre l’importation et la préparation des données, leur analyse et leur valorisation. 4.2 Le Tidyverse le tidyverse 4.3 Les concepts clefs Pour construire un graphique avec ggplot2, il faut définir plusieurs éléments : la donnée : ggplot2 permet de travailler sur des vecteurs, des dataframes, des tibbles, ou des données spatiales ; le mapping : on définit dans l’aesthetic (ou aes) le mapping, c’est à dire la correspondance entre éléments visuels et les variables. C’est dans l’aesthetic (ou aes) qu’est déclaré que l’on veut représenter qui dépend des variables (quelle variable sur l’axe x, sur l’axe y, quelle variable pour définir une graduation de couleurs…) ; les paramètres : on définit les autres paramètres qui dépendent de constantes (par exemple : je veux que toutes mes lignes soient rouge ou de taille 2 pixels) ; le layer (“forme géométrique”) : on définit sous quelle représentation graphique on représente les paramètres précédents. Sous ggplot, ces fonctions sont de la forme geom_XX ; L’écriture type d’un graphique est donc: ggplot(data = &lt;DATA&gt;) + &lt;FORME_GEO&gt;(mapping = aes(&lt;MAPPINGS&gt;),...=&lt;PARAMS&gt;) On va ensuite pouvoir enrichir avec des fonctions supplémentaires. Chaque fonction s’enchaine avec des + comme les pipe. ggplot(data = &lt;DATA&gt;) + &lt;FORME_GEO&gt;(mapping = aes(&lt;MAPPINGS&gt;),...=&lt;PARAMS&gt;)+ &lt;FONCTION1&gt;+ ... "],["le-mapping.html", "Chapitre 5 Le mapping 5.1 Les paramètres du mapping 5.2 Les “autres” paramètres 5.3 Exercice 1", " Chapitre 5 Le mapping 5.1 Les paramètres du mapping Dans l’exemple qui suit, la représentation géographique utilisée est le nuage de points geom_point. D’autres types de représentations géographiques sont présentés dans la partie suivante. L’aesthetic sert à identifier les variables que l’on souhaite représenter. Par exemple, si l’on souhaite représenter le taux de mortalité maternelle (Maternal_mortality_ratio) en fonction du produit intérieur brut (Gross_Domestic_Product_GDP) : ggplot(data = ODD_graphique1) + geom_point(aes(x=Gross_Domestic_Product_GDP,y=Maternal_mortality_ratio)) De plus, la fonction aes admet d’autres arguments qui permettent de modifier l’apparence du graphique selon une 3ème variable du jeu de données. colour : la couleur, shape : la forme, size : la taille, alpha : la transparence, fill : le remplissage ; ggplot(data = ODD_graphique1) + geom_point(aes(x=Gross_Domestic_Product_GDP,y=Maternal_mortality_ratio,colour=Continent)) 5.2 Les “autres” paramètres Il est possible de spécifier des paramètres qui seront valables pour l’ensemble du graphique. On retrouve entre autre les mêmes paramètres proposés dans l’aes, mais il faut alors les passer en dehors de l’aesthetic. Par exemple, si l’on souhaite modifier la transparance et la taille de l’ensemble des points du graphique précédent: ggplot(data = ODD_graphique1) + geom_point(aes(x=Gross_Domestic_Product_GDP,y=Maternal_mortality_ratio,colour=Continent), alpha=0.5,size=1.9) De même si l’on souhaite modifier la couleur générale : ggplot(data = ODD_graphique1) + geom_point(aes(x=Gross_Domestic_Product_GDP,y=Maternal_mortality_ratio), color=&quot;red&quot;) Pour choisir et modifier facilement les couleurs d’un graphe, il existe un addin développé par Dean Attali: Colour Picker Il est installable comme n’importe quel package. Pour plus d’informations: https://github.com/daattali/colourpicker. 5.3 Exercice 1 A partir des données de la table rpls_aggrege_large (dans extdata/rpls_aggrege_large.RData), créer un nuage de point (un point par EPCI) entre : le % de parc social de moins de 5 ans (‘Parc_de_moins_de_5_ans_pourcent’); et le pourcentage de logement avec un DPE ges de classe A, B ou C (‘DPE_GES_classe_ABC_pourcent’); et une couleur différente pour distinguer les epci de la région PDL (booléen ‘epci_2017_52’). Le résultat attendu : "],["les-formes-géométriques.html", "Chapitre 6 Les formes géométriques", " Chapitre 6 Les formes géométriques Pour spécifier le type de représentation que l’on souhaite, il faut utiliser les fonctions de la forme geom_XX Le tableau ci-dessous présente quelques représentations graphiques classiques. Il en existe un grand nombre que l’on peut retrouver grâce à l’aide help.search(&quot;^geom_&quot;, package = &quot;ggplot2&quot;) GEOM DESCRIPTION geom_point() Nuage de points geom_line() Ligne geom_bar() Diagramme en barres geom_histogram() Histogramme geom_boxplot() Boîte à moustaches geom_density() Courbe de densité ggplot(data = ODD_graphique1) + geom_bar(aes(Continent)) ggplot(ODD_graphique1) + geom_histogram(aes(x=log(Gross_Domestic_Product_GDP))) ggplot(ODD_graphique1) + geom_density(aes(x=log(Gross_Domestic_Product_GDP))) ggplot(ODD_graphique2) + geom_line(aes(x=Year,y=Value)) "],["lhabillage-simple.html", "Chapitre 7 L’habillage simple 7.1 Titre et libellé des axes 7.2 Légende 7.3 Annotations", " Chapitre 7 L’habillage simple 7.1 Titre et libellé des axes Chaque nouvel élément graphique est à rajouter sous forme de layer. Ici, nous utilisons la fonction labs qui permet de labelliser tous les éléments possibles de l’aesthétic, ainsi que le titre (title), le sous titre (subtitle) et le bas de page (caption) ggplot(ODD_graphique1) + geom_point(aes(x=log(Gross_Domestic_Product_GDP), y=log(Maternal_mortality_ratio), color=Continent))+ labs(title=&quot;Mortalité maternelle en fonction du PIB par habitant&quot;, subtitle=&quot;En 2015&quot;, x=&quot;PIB&quot;, y=&quot;Taux de mortalité de la mère \\n(pour 100 000 naissances)&quot;, color=&quot;Les continents&quot;, caption=&quot;Source : ODD / ONU&quot;) À noter qu’il existe plusieurs autres façons de spécifier ces éléments par des couches spécifiques: ggtitle, xlab, ylab,… 7.2 Légende Les fonctions guide() et guides permettent de modifier finement la légende. Les guides peuvent être spécifiés dans chaque scale_* ou dans une instruction guides. ggplot(ODD_graphique1) + geom_point(aes(x=log(Gross_Domestic_Product_GDP), y=log(Maternal_mortality_ratio), color=Continent))+ labs(title=&quot;Mortalité maternelle en fonction du PIB par habitant&quot;, subtitle=&quot;En 2015&quot;, x=&quot;PIB&quot;, y=&quot;Taux de mortalité de la mère \\n(pour 100 000 naissances)&quot;, caption=&quot;Source : ODD / ONU&quot;)+ guides(color=guide_legend(direction=&quot;horizontal&quot;, order=1, title.position=&quot;top&quot;, title.hjust=0.5, nrow=1, label.position=&quot;bottom&quot;))+ theme(legend.position = &quot;bottom&quot;) 7.3 Annotations Il est aussi possible de rajouter des annotations de type texte ou autre, par exemple, “à la volée.” La fonction annotate() va nous permettre de rajouter nos annotations. Ici nous rajoutons une fonction pour rajouter un texte, une autre pour rajouter une flèche. ggplot(ODD_graphique1) + geom_point(aes(x=log(Gross_Domestic_Product_GDP), y=log(Maternal_mortality_ratio), color=Continent))+ labs(title=&quot;Mortalité maternelle en fonction du PIB par habitant&quot;, subtitle=&quot;En 2015&quot;, x=&quot;PIB&quot;, y=&quot;Taux de mortalité de la mère \\n(pour 100 000 naissances)&quot;, caption=&quot;Source : ODD / ONU&quot;) + annotate(&quot;label&quot;, x = 11, y = 6.5, size = 3, label = &quot;882 décès \\npour 100 000 naissances \\nen République centrafricaine&quot;, color=&quot;white&quot;, fill = &quot;red&quot;) + annotate(&quot;curve&quot;, xend = log(333.1885),yend = log(882), x = 10.2, y = 6.5, curvature = -0.1, color = &quot;red&quot;, arrow = arrow(length = unit(2, &quot;mm&quot;)) )+ theme(legend.position = &quot;bottom&quot;) Cette fonction ajoute des geom à un graphique, mais contrairement à une fonction geom typique, les propriétés des geom ne sont pas mappées à partir des variables d’un dataframe, mais depuis des vecteurs que nous lui renseignons. Ceci est utile pour ajouter de petites annotations. Leur définition est donc assez proche des fonctions geom. "],["les-thèmes.html", "Chapitre 8 Les thèmes 8.1 Les fonctions “element” 8.2 Les composantes 8.3 Quelques exemples 8.4 Modifier le thème par défaut 8.5 Créer son propre thème 8.6 Thème - package gouvdown 8.7 Exercice 2", " Chapitre 8 Les thèmes Les thèmes ggplot2 vous permettent de modifier l’apparence de vos graphiques. Derrière l’apparence, on désigne tout ce qui n’est pas relatif aux données, comme les polices de caractère, les grilles, l’arrière plan : Quelle police de caractère pour le titre du graphique ? Pour le titre de l’axe des x ? Quelle taille de police ? Quelle couleur pour l’arrière plan ? Quel type de ligne pour les grilles ? Il existe des thèmes prédéfinis dans ggplot que l’on peut déjà utiliser. Par exemple : theme_classic(), theme_bw(), theme_dark(), … Des packages externes permettent d’enrichir cette collection de thèmes, par exemple ggthemes ou hrbrthemes. Lorsque l’on souhaite garder une cohérence entre plusieurs graphiques, le mieux est d’en définir un à part pour l’appeler ensuite. La fonction de {ggplot2} qui vous permet de modifier le thème par défaut est la fonction [theme()](http://ggplot2.tidyverse.org/reference/theme.html). Chaque élément va ensuite pouvoir être modifié finement. Ce schéma de Heny Wang permet de bien synthétiser l’ensemble des éléments thémables. ] Et nous allons ci dessous le détailler. 8.1 Les fonctions “element” Elle utilise 4 types de fonctions : element_text() : pour toutes les étiquettes PARAMÈTRE VALEUR family la famille de la police face le type de police (“plain,” “italic,” “bold,” “bold.italic”) colour couleur size taille en points hjust justification horizontale, dans [0, 1] vjust justification verticale, dans [0, 1] angle angle, dans [0, 360] lineheight hauteur de ligne (pour l’espacement entre les lignes) element_rect() : pour les fonds et les cadres, PARAMÈTRE VALEUR fill la couleur de remplissage colour la couleur de la bordure size la taille de la bordure linetype le type de ligne (“blank,” “solid,” “dashed,” “dotted,” “dotdash,” “longdash,” \"twodash) element_line() : pour toutes les lignes tracées, PARAMÈTRE VALEUR colour la couleur de ligne size la taille linetype le type de ligne (“blank,” “solid,” “dashed,” “dotted,” “dotdash,”“longdash,” \"twodash) lineend le type de fin de ligne (“round,” “butt” ou “square”) element_blank() : permet de ne rien dessiner. 8.2 Les composantes Il s’agit des différents éléments modifiables dans le thème. Par exemple : Axes axis.line, axis.text.x, axis.text.y, axis.ticks, axis.title.x, axis.title.y,… Légende legend.background, legend.key, legend.text, legend.title,… Fond de graphe panel.background, panel.border, panel.grid.major, panel.grid.minor,… etc 8.3 Quelques exemples gg&lt;-ggplot(ODD_graphique1) + geom_point(aes(x=log(Gross_Domestic_Product_GDP), y=log(Maternal_mortality_ratio), color=Continent))+ labs(title=&quot;Mortalité maternelle en fonction du PIB par habitant&quot;, subtitle=&quot;En 2015&quot;, x=&quot;PIB&quot;, y=&quot;Taux de mortalité de la mère \\n(pour 100 000 naissances)&quot;, caption=&quot;Source : ODD / ONU&quot;) Changer le fond du graphique panel_background gg + theme(panel.background = element_rect(fill=&quot;Lavender&quot;,colour=&quot;black&quot;)) Changer l’apparence du quadrillage panel_background gg + theme(panel.grid.major = element_line(colour=&quot;gray&quot;,size=0.5,linetype=&quot;dashed&quot;)) Changer l’apparence des étiquettes des axes axis_xxx() gg + theme(axis.text.x = element_text(colour = &quot;blue&quot;, angle = 45), axis.title = element_text(face = &quot;bold&quot;, colour = &quot;orange&quot;)) Certains changements de paramètres ne nécessitent pas l’utilisation de fonction element_() . Par exemple, pour changer la position de la légende legend.xxx() gg + theme(legend.position=&quot;left&quot;,legend.title=element_blank()) 8.4 Modifier le thème par défaut La fonction theme_set() vous permet de définir un thème par défaut pour l’ensemble de vos graphiques. theme_set(theme_dark()) #Le theme_dark() sera appliqué à tous les graphiques à partir de maintenant ggplot(ODD_graphique1) + geom_point(aes(x=log(Gross_Domestic_Product_GDP), y=log(Maternal_mortality_ratio), color=Continent))+ labs(title=&quot;Mortalité maternelle en fonction du PIB par habitant&quot;, subtitle=&quot;En 2015&quot;, x=&quot;PIB&quot;, y=&quot;Taux de mortalité de la mère \\n(pour 100 000 naissances)&quot;, caption=&quot;Source : ODD / ONU&quot;) #Réinitialisation d&#39;un thème par défaut, car le noir c&#39;est triste! theme_set(theme_grey()) 8.5 Créer son propre thème Un thème est une fonction R qui va prendre en paramètre des éléments que vous souhaitez pouvoir faire varier et fixer des éléments que vous souhaitez avoir comme rendu par défaut. Créons un thème avec un fond vert pour le ministère de la transition écologique et solidaire. On rajoute un paramètre pour la taille de la police du titre du graphique. library(hrbrthemes) mon_theme&lt;-function(taille_police=14){ theme_bw()+ theme(plot.title = element_text(color = &quot;white&quot;,size=taille_police,face=&quot;bold&quot;), text = element_text(color=&quot;white&quot;), axis.text = element_text(color=&quot;white&quot;), panel.background = element_rect(fill=&quot;lightgreen&quot;,colour=&quot;lightgreen&quot;), plot.background= element_rect(fill=&quot;#006400&quot;,colour=&quot;lightgreen&quot;), legend.background = element_rect(fill=&quot;lightgreen&quot;,colour=&quot;lightgreen&quot;), legend.key = element_blank()) } ggplot(ODD_graphique1) + geom_point(aes(x=log(Gross_Domestic_Product_GDP), y=log(Maternal_mortality_ratio), color=Continent))+ labs(title=&quot;Mortalité maternelle en fonction du PIB par habitant&quot;, subtitle=&quot;En 2015&quot;, x=&quot;PIB&quot;, y=&quot;Taux de mortalité de la mère \\n(pour 100 000 naissances)&quot;, caption=&quot;Source : ODD / ONU&quot;)+ mon_theme() 8.6 Thème - package gouvdown {gouvdown} est un package créé par la communauté d’agents de l’Etat (Spyrales). Il s’agit d’ensemble de fonctionnalités qui permet de produire des documents/éléments avec une charte graphique prenant en compte la marque État. L’utilisation de theme_gouv() permet d’appliquer cette charte. library(gouvdown) ggplot(ODD_graphique1) + geom_point(aes(x=log(Gross_Domestic_Product_GDP), y=log(Maternal_mortality_ratio), color=Continent))+ labs(title=&quot;Mortalité maternelle en fonction du PIB par habitant&quot;, subtitle=&quot;En 2015&quot;, x=&quot;PIB&quot;, y=&quot;Taux de mortalité de la mère \\n(pour 100 000 naissances)&quot;, caption=&quot;Source : ODD / ONU&quot;)+ theme_gouv(plot_title_size = 15, subtitle_size = 11, base_size = 10) NB: Pour les cartes, theme_gouv_map() sera privilégié. 8.7 Exercice 2 A partir des données de la table graphique 1 (‘ODD_graphique1’), reprendre le nuage de point obtenu à partir des données ODD : taux de mortalité maternelle (Maternal_mortality_ratio) en fonction du produit intérieur brut (Gross_Domestic_Product_GDP) (Chapitre 7.1) En modifier le thème: Insérer un titre de couleur, en gras, centré par rapport au graphe. Indiquer la source (ODD) et modifier sa taille Changer les titres des axes et leurs tailles. modifier la couleur de fond du graphe modifier le type de gadrillage (pointillés) Le résultat attendu "],["les-scales.html", "Chapitre 9 Les scales 9.1 Les fonctions 9.2 Scales - package gouvdown 9.3 Formatage spécifique 9.4 Exercice 3", " Chapitre 9 Les scales 9.1 Les fonctions Les fonctions scale permettent globalement de paramétrer les éléments rentrés dans l’aesthétic : Si je veux un gradient de couleur fonction d’une variable continue : quelle palette de couleur je choisis, comment je cale mon dégradé en fonction de cette variable continue ? Si je mets une variable continue en ordonnée, comment je définis le minimum et maximum de cet axe, sa position, les valeurs que j’affiche sur l’échelle… L’ensemble des scales possibles peuvent se décrire sous la forme suivante: scale_xx_yy où xx peut être un des paramètres de l’aesthétic : xx description alpha transparence color couleur des lignes ou des points fill couleurs des aires linetype type de ligne (continue,pointillée,…) shape forme des points size aire des points x variable de l’axe x y variable de l’axe y Et yy un type de paramétrage : yy description continuous gérer les variables continue discrete gérer les variables discrètes date gérer une variable au format date reverse inverser l’axe log convertire l’échelle d’une variable continue en échelle logarithmique log10 convertir l’échelle d’une variable continue en échelle logarithmique décimale viridis utiliser une palette de couleur viridis brewer utiliser une palette de couleur brewer (variable discrète) distiller utiliser une palette de couleur brewer (variable continue) gradient utiliser un gradient de 2 couleurs gradient2 utiliser un gradient divergent de 3 couleurs manual utiliser une palette de couleur via un vecteur défini par l’utilisateur gg &lt;- ggplot(ODD_graphique1) + geom_point(aes(x = log(Gross_Domestic_Product_GDP), y = log(Maternal_mortality_ratio), color = Continent)) gg + scale_color_brewer(type = &quot;qual&quot;) #Pour visualiser les palettes disponibles #RColorBrewer::display.brewer.all() Par exemple on peut exploiter une fonction scale pour définir une échelle logarithmique sur un axe. ggplot(ODD_graphique1) + geom_point(aes(x=Gross_Domestic_Product_GDP, y=Maternal_mortality_ratio, color=Continent))+ scale_color_brewer(type=&quot;qual&quot;)+ scale_x_log10()+ scale_y_log10() L’instruction limits permet de forcer les bornes maximum et minimum. Elle prend en valeur un vecteur des deux bornes souhaitées. gg+ scale_y_continuous(limits = c(NA, 10)) En mettant la borne minimum/maximum à NA permet de conserver la valeur minimum/maximum par défaut. 9.2 Scales - package gouvdown La fonction scale_color_gouv_discrete() du package gouvdown permet d’utiliser les palettes de couleurs de ce package. Il en est de même pour scale_color_gouv_continuous, scale_fill_gouv_discrete et scale_fill_gouv_continuous library(gouvdown) gg &lt;- ggplot(ODD_graphique1) + geom_point(aes(x=log(Gross_Domestic_Product_GDP), y=log(Maternal_mortality_ratio), color=Continent)) gg + scale_color_gouv_discrete(name = &quot;&quot;, palette = &quot;pal_gouv_qual1&quot;) + theme_gouv() 9.3 Formatage spécifique Transformation en pourcentage; scale_y_continuous(labels=scales::percent) Ajout du séparateur des milliers; scale_y_continuous(labels=function(x) format(x,big.mark=&quot; &quot;,scientific = FALSE)) Ajout du symbole €; scale_y_continuous(labels=function(x) paste(x,&quot; €&quot;)) Formatage des axes dates scales_x_date() et scales_y_date() vous permettent de modifier le formatage de vos axes dates. Deux paramètres important vous seront utiles sur ces axes, date_labels et date_breaks modifient respectivement le libellé des dates et pas de temps qui défini les grilles. Ici nous modifions le pas des date à 3 mois et mettons le libellé sous un format avec le nom du mois abrégé et l’année en 4 chiffres. Pour connaître toutes les écritures possibles d’une date, vous pouvez consulter cette page. scale_x_date(date_breaks = &quot;3 months&quot;, date_labels = &quot;%b %Y&quot;) Formatage du point de départ des axes : x = 0, y = 0 scale_x_continuous(expand = c(0, 0)) scale_y_continuous(expand = c(0, 0)) 9.4 Exercice 3 En réutilisant le graphe obtenu à l’exercice 1 (table rpls_aggrege_large), y rajouter: une palette brewer pour la couleur; la légende en bas; des libellés (axes et légende) parlant et un titre. Le résultat attendu "],["la-mise-en-page-de-plusieurs-graphiques.html", "Chapitre 10 La mise en page de plusieurs graphiques", " Chapitre 10 La mise en page de plusieurs graphiques Le package cowplot permet la combinaison de plusieurs graphiques. Il est composé de plusieurs fonctions. la fonction plot_grid qui permet de disposer n graphes sur i colonnes et j lignes gg1 &lt;- ggplot(ODD_graphique1) + geom_point(aes( x = Gross_Domestic_Product_GDP, y = Maternal_mortality_ratio )) + scale_x_log10() + scale_y_log10() + labs( title = &quot;Mortalité maternelle en fonction du PIB par habitant&quot;, subtitle = &quot;En 2015&quot;, x = &quot;PIB&quot;, y = &quot;Taux de mortalité de la mère \\n(pour 100 000 naissances)&quot;, caption = &quot;Source : ODD / ONU&quot; ) + theme(axis.title = element_text(size = 9)) gg2 &lt;- ggplot(ODD_graphique1) + geom_density(aes(x = log(Gross_Domestic_Product_GDP))) plot_grid(gg1, gg2, ncol = 1, nrow = 2) la fonction draw_plot associée à ggdraw qui permet de disposer les graphiques à des places spécifiques ggdraw initialise le graphique gg1&lt;-ggplot(ODD_graphique1) + geom_point(aes(x=Gross_Domestic_Product_GDP, y=Maternal_mortality_ratio))+ scale_x_log10()+ scale_y_log10()+ labs(title=&quot;Mortalité maternelle en fonction du PIB par habitant&quot;, subtitle=&quot;En 2015&quot;, x=&quot;PIB&quot;, y=&quot;Taux de mortalité de la mère \\n(pour 100 000 naissances)&quot;, caption=&quot;Source : ODD / ONU&quot;) + theme(axis.title= element_text(size=9)) gg2&lt;-ggplot(ODD_graphique1) + geom_density(aes(x=log(Gross_Domestic_Product_GDP)) )+ labs(x=&quot;Log(PIB)&quot;, y=&quot;Densité&quot;) gg3&lt;-ggplot(data = ODD_graphique1) + geom_bar(aes(x=Continent,fill=Continent))+ theme(axis.title.x = element_blank(), axis.text.x = element_blank()) ggdraw() + draw_plot(gg1, x=0, y=.5, width=1, height=.5) + draw_plot(gg2, x=0, y=0, width=.3, height=.5) + draw_plot(gg3, x=0.3, y=0, width=0.7, height=.5) "],["les-facettes.html", "Chapitre 11 Les facettes 11.1 Exercice 4", " Chapitre 11 Les facettes Lorsque l’on veut pouvoir réaliser un graphique pour plusieurs sous-ensembles, les facettes sont alors très utiles. On va ici l’illustrer avec la réalisation du même graphique ci-dessus, mais pour plusieurs années différentes. ODD_indicateur311 %&gt;% filter(Type_Zone != &quot;Pays&quot;, Age_group==&quot;All age ranges or no breakdown by age&quot;, Sex==&quot;Both sexes or no breakdown by sex&quot;, Location==&quot;Total (national level)&quot;, is.na(Value_type) ) %&gt;% filter(Year %in% c(2000,2005,2010,2015)) %&gt;% ggplot()+ geom_bar(aes(x=Country_or_Area_Name,weight=Value,fill=Country_or_Area_Name))+ theme_minimal()+ scale_fill_ipsum()+ coord_flip()+ labs(title=&quot;Mortalité maternelle sur quelques zones du globe&quot;, subtitle=&quot;Années 2000 à 2015&quot;, y=&quot;Taux de mortalité de la mère \\n(pour 100 000 naissances)&quot;, x=&quot;Zone&quot;, fill=&quot;Zone&quot; )+ theme(legend.position = &quot;none&quot;)+ facet_wrap(~Year) Cet exemple “scinde” notre table en fonction d’une seule variable, mais on peut le faire sur plusieurs variables également. On peut choisir avec facet_wrap : - le nombre de colonnes ou de lignes sur lesquels on veut voir s’afficher le graphique ; - si on veut fixer l’échelle de l’un ou l’autre des axes ou les deux. ODD_indicateur311 %&gt;% filter(Type_Zone != &quot;Pays&quot;, Age_group==&quot;All age ranges or no breakdown by age&quot;, Sex==&quot;Both sexes or no breakdown by sex&quot;, Location==&quot;Total (national level)&quot;, is.na(Value_type) ) %&gt;% filter(Year %in% c(2000,2005,2010,2015)) %&gt;% ggplot()+ geom_bar(aes(x=Country_or_Area_Name,weight=Value,fill=Country_or_Area_Name))+ theme_minimal()+ scale_fill_ipsum()+ coord_flip()+ labs(title=&quot;Mortalité maternelle sur quelques zones du globe&quot;, subtitle=&quot;Années 2000 à 2015&quot;, y=&quot;Taux de mortalité de la mère \\n(pour 100 000 naissances)&quot;, x=&quot;Zone&quot;, fill=&quot;Zone&quot; )+ theme(legend.position = &quot;none&quot;)+ facet_wrap(~Year, ncol = 4) 11.1 Exercice 4 A partir de la table rpls_aggrege, réaliser une facette sur un diagramme barre avec : en variable discrète les régions en variables continues les indicateurs suivants : % de logements de 3 et 4 pièces % DPE énergie A,B,C % DPE GES A,B,C % de parc de moins de 5 ans une façon d’identifier la région Pays de la Loire (code region ‘52’) Pour avoir la liste des modalités dune variable : Variables caractères ou factorielles : unique(rpls_aggrege$Indicateur) Variables factorielles : levels(rpls_aggrege$Indicateur) Résultat attendu "],["exporter-un-graphique.html", "Chapitre 12 Exporter un graphique", " Chapitre 12 Exporter un graphique La fonction ggsave() de ggplot2 permet d’exporter des graphiques au format image. Les formats suivants sont supportés : eps, ps, tex (pictex), pdf, jpeg, tiff, png, bmp, svg et wmf. p&lt;-ODD_indicateur311 %&gt;% filter(Type_Zone != &quot;Pays&quot;, Age_group==&quot;All age ranges or no breakdown by age&quot;, Sex==&quot;Both sexes or no breakdown by sex&quot;, Location==&quot;Total (national level)&quot;, is.na(Value_type) ) %&gt;% filter(Year %in% c(2000,2005,2010,2015)) %&gt;% ggplot()+ geom_bar(aes(x=Country_or_Area_Name,weight=Value,fill=Country_or_Area_Name))+ theme_minimal()+ scale_fill_ipsum()+ coord_flip()+ labs(title=&quot;Mortalité maternelle sur quelques zones du globe&quot;, subtitle=&quot;En 2015&quot;, y=&quot;Taux de mortalité de la mère \\n(pour 100 000 naissances)&quot;, x=&quot;Zone&quot;, fill=&quot;Zone&quot; )+ theme(legend.position = &quot;none&quot;)+ facet_wrap(~Year,ncol=4) ggsave(&quot;figures/Mortalité maternelle sur quelques zones du globe.svg&quot;,p,width=12,height = 5) "],["créer-des-cartes-avec-ggplot2.html", "Chapitre 13 Créer des cartes avec ggplot2 13.1 Les cartes choroplèthes 13.2 Les cartes à ronds proportionnels 13.3 Les facettes 13.4 Ajouter une barre d’échelle et la flèche du nord 13.5 Ajouter des étiquettes et du texte 13.6 Exercice 5", " Chapitre 13 Créer des cartes avec ggplot2 13.1 Les cartes choroplèthes Une fonction géométrique de ggplot2 permet l’utilisation de données géomatiques : geom_sf() L’exemple suivant est une carte choroplèthe. data(&quot;World&quot;) tt &lt;- World %&gt;% rename(Country_or_Area_Code=iso_a3) %&gt;% inner_join(ODD_indicateur311 %&gt;% filter(Age_group==&quot;All age ranges or no breakdown by age&quot;, Sex==&quot;Both sexes or no breakdown by sex&quot;, Type_Zone==&quot;Pays&quot;, is.na(Value_type)) %&gt;% group_by(Country_or_Area_Code) %&gt;% filter(!is.na(Value)) %&gt;% filter(Year==max(Year))) ggplot(data=tt)+ geom_sf(aes(fill=Value)) 13.2 Les cartes à ronds proportionnels La fonction stat_sf_coordinates() permet d’extraire les coordonnées d’un objet ‘sf.’ Ainsi un rond proportionnel peut être attribuer à un polygone. data(&quot;World&quot;) tt &lt;- World %&gt;% rename(Country_or_Area_Code=iso_a3) %&gt;% inner_join(ODD_indicateur311 %&gt;% filter(Age_group==&quot;All age ranges or no breakdown by age&quot;, Sex==&quot;Both sexes or no breakdown by sex&quot;, Type_Zone==&quot;Pays&quot;, is.na(Value_type)) %&gt;% group_by(Country_or_Area_Code) %&gt;% filter(!is.na(Value)) %&gt;% filter(Year==max(Year))) ggplot(data=tt)+ geom_sf(fill=&quot;grey97&quot;)+ stat_sf_coordinates(aes(size=Value,fill=Value),color = &quot;black&quot;,shape=21)+ scale_fill_gradient2(name = &quot;Valeur&quot;, low = &quot;darkblue&quot;, mid = &quot;white&quot;, high = &quot;darkred&quot;)+ scale_size_area(name = &quot;Valeur&quot;, max_size = 10) 13.3 Les facettes On peut exploiter de la même façon les différentes fonctions vues précédemment. Par exemple : avec un peu de thème et de facet. data(&quot;World&quot;) tt &lt;- World %&gt;% st_transform(4326) %&gt;% rename(Country_or_Area_Code=iso_a3) %&gt;% inner_join(ODD_indicateur311 %&gt;% filter(Age_group==&quot;All age ranges or no breakdown by age&quot;, Sex==&quot;Both sexes or no breakdown by sex&quot;, Type_Zone==&quot;Pays&quot;, is.na(Value_type)) %&gt;% group_by(Country_or_Area_Code) %&gt;% filter(!is.na(Value)) %&gt;% filter(Year %in% c(1990,2000,2010,2015)) %&gt;% ungroup() %&gt;% complete(Year) ) ggplot(data=tt)+ geom_sf(aes(fill=log(Value)))+ theme_minimal()+ scale_fill_viridis(option = &quot;magma&quot;, direction=1, breaks=c(0,1,2,3,4,5,6,7))+ guides( fill=guide_legend(direction=&quot;horizontal&quot;, keyheight=unit(2, units=&quot;mm&quot;), keywidth=unit(20, units=&quot;mm&quot;), order=1, title.position = &quot;top&quot;, title.hjust = 0.5, nrow=1, label.position = &quot;bottom&quot;, label.hjust=1)) + theme(legend.position = &quot;bottom&quot;) + labs(fill=&quot;Log du taux de mortalité infantile&quot;) + facet_wrap(~Year, drop = TRUE) 13.4 Ajouter une barre d’échelle et la flèche du nord Le package ggspatial permet d’enrichir simplement nos cartes ggplot2 avec une barre d’échelle et la flèche du nord. Les deux fonctions qui permettent cela sont annotation_scale() et annotation_north_arrow(). L’utilisation de ces fonctions nécessitent un système de coordonnées géographiques. data(&quot;World&quot;) tt &lt;- World %&gt;% rename(Country_or_Area_Code=iso_a3) %&gt;% inner_join(ODD_indicateur311 %&gt;% filter(Age_group==&quot;All age ranges or no breakdown by age&quot;, Sex==&quot;Both sexes or no breakdown by sex&quot;, Type_Zone==&quot;Pays&quot;, is.na(Value_type)) %&gt;% group_by(Country_or_Area_Code) %&gt;% filter(!is.na(Value)) %&gt;% filter(Year==max(Year))) ggplot(data=tt %&gt;% filter(continent==&quot;Africa&quot;))+ geom_sf(aes(fill=Value))+ annotation_scale(location = &quot;br&quot;, line_width = .5) + annotation_north_arrow(location = &quot;bl&quot;, height = unit(0.7, &quot;cm&quot;), width = unit(0.7, &quot;cm&quot;)) 13.5 Ajouter des étiquettes et du texte Les 2 fonctions geom_sf_text() et geom_sf_label() permettent respectivement d’afficher du texte et des étiquettes sur des objets de types sf data(&quot;World&quot;) tt&lt;-World %&gt;% rename(Country_or_Area_Code=iso_a3) %&gt;% inner_join(ODD_indicateur311 %&gt;% filter(Age_group==&quot;All age ranges or no breakdown by age&quot;, Sex==&quot;Both sexes or no breakdown by sex&quot;, Type_Zone==&quot;Pays&quot;, is.na(Value_type)) %&gt;% group_by(Country_or_Area_Code) %&gt;% filter(!is.na(Value)) %&gt;% filter(Year==max(Year))) ggplot(data=tt %&gt;% filter(continent==&quot;Africa&quot;))+ geom_sf(aes(fill=Value))+ geom_sf_text(aes(label = name),vjust=-0.5,check_overlap=TRUE,fontface=&quot;italic&quot;,colour=&quot;white&quot;) 13.6 Exercice 5 Produire une carte du Loiret à l’EPCI du taux de logements collectifs dans le parc locatif social. Résultat attendu "],["animer-ses-graphiques-ggplot-avec-gganimate.html", "Chapitre 14 Animer ses graphiques ggplot avec gganimate 14.1 Produire une animation 14.2 Paramétrer l’animation 14.3 Exporter une animation 14.4 Exercice 6", " Chapitre 14 Animer ses graphiques ggplot avec gganimate Le package gganimate permet d’enrichir ggplot avec des fonctionnalités d’animation. 14.1 Produire une animation Nous allons voir comment animer notre premier graphique sur la répartition des pays en fonction du taux de mortalité et du PIB, en regardant comment celui ci évolue avec les années. Pour cela, nous partons des même données mais définies pour l’ensemble des années depuis 1990. ggplot(data = ODD_graphique_anime) + geom_point(aes(x=log(Gross_Domestic_Product_GDP), y=log(Maternal_mortality_ratio), color=Continent))+ labs(title=&quot;Mortalité maternelle en fonction du PIB par habitant&quot;, subtitle=&quot;En 2015&quot;, x=&quot;PIB&quot;, y=&quot;Taux de mortalité de la mère \\n(pour 100 000 naissances)&quot;, caption=&quot;Source : ODD / ONU\\n échelle logarithmique&quot;) Le graphique précédent est bien sûr illisible, un même pays voit ces données affichées pour toutes les années. Nous allons utiliser la fonction transition_states() du package gganimate pour lui définir l’année comme la frame de notre graphique animé. anim &lt;- ggplot(data = ODD_graphique_anime) + geom_point(aes(x=log(Gross_Domestic_Product_GDP), y=log(Maternal_mortality_ratio), color=Continent)) + labs(title=&quot;Mortalité maternelle en fonction du PIB par habitant&quot;, subtitle=&quot;En {closest_state}&quot;, x=&quot;PIB&quot;, y=&quot;Taux de mortalité de la mère \\n(pour 100 000 naissances)&quot;, caption=&quot;Source : ODD / ONU\\n échelle logarithmique&quot;)+ transition_states(states=Year, transition_length = 1, state_length = 2) anim Transition_states() peut s’assimiler à la création de facettes, mais qui vont être ensuite utilisées pour créer une animation. Les options permettant de paramétrer cette animation: states: le nom de la colonne qui va définir nos états transition_length : la durée relative de la transition state_length : la durée relative de la pause entre les transitions wrap : booléen qui défini si l’animation tourne en boucle ou non. La variable closest_state nous permet d’utiliser ici l’état pour l’afficher en sous-titre. gganimate possède encore bien d’autres fonctionnalités pour définir son animation, notamment : ease_aes() permet de définir comment le graphique change entre deux états : progression linaire, progression qui accélère entre le début et la fin… enter_xx() et exit_xx() permette de définir comment les objets apparaissent et disparaissent quand on change d’état. On peut utiliser gganimate avec des facettes. anim_facet &lt;- ggplot(data = ODD_graphique_anime) + geom_point(aes(x=log(Gross_Domestic_Product_GDP), y=log(Maternal_mortality_ratio), color=Continent)) + labs(title=&quot;Mortalité maternelle en fonction du PIB par habitant&quot;, subtitle=&quot;En {closest_state}&quot;, x=&quot;PIB&quot;, y=&quot;Taux de mortalité de la mère \\n(pour 100 000 naissances)&quot;, caption=&quot;Source : ODD / ONU\\n échelle logarithmique&quot;)+ facet_wrap(~Continent) + transition_states(states=Year, transition_length = 1, state_length = 2) anim_facet 14.2 Paramétrer l’animation La fonction animate() permet de paramétrer notre animation. Notamment: - le moteur de rendu - le nombre de frames à créer - le frame rate - la durée Ici par exemple, nous paramétrons le rendu pour supprimer la boucle d’animation (loop=FALSE) animate(anim,renderer=gifski_renderer(file = tempfile(fileext = &quot;.gif&quot;), loop = FALSE, width = NULL, height = NULL) ) 14.3 Exporter une animation La fonction anime_save() permet de sauvegarder nos animations sous différent format à définir via le moteur de rendu. Par défaut, elle sauvegarde la dernière animation. anim_save(&quot;figures/ma_super_animation.gif&quot;) 14.4 Exercice 6 A partir du fichier rpls_aggrege_large.RData, réaliser un graphique en barre représentant la répartition des DPE par classe (en %). Le graphique sera animé par département, uniquement pour ceux de la région Centre-Val de Loire. Le résultat attendu : "],["créer-des-graphiques-et-cartes-pour-le-web.html", "Chapitre 15 Créer des graphiques et cartes pour le web 15.1 ggiraph 15.2 Les cartes Leaflet 15.3 Exporter une sortie html 15.4 Exercice 7", " Chapitre 15 Créer des graphiques et cartes pour le web 15.1 ggiraph {ggiraph} est un package qui permet de rendre interactif des graphiques ggplot. Il permet notamment d’y ajouter des infobulles, Ce package rajoute des fonctionnalités à ggplot2 comme par exemple geom_bar_interactive(),geom_line_interactive(), geom_point_interactive(), … Il existe 3 types d’ajout: tooltip: l’information à afficher dans les infobulles au survol de la souris data_id: l’identifiant à associer à l’élément (utilisé pour les actions de survol et de clic) onclick: fonction JavaScript à exéctuer lorsque des éléments sont cliqués Le graphique est ensuite produit à l’aide de la fonction girafe() sur un objet ggplot. 15.1.1 Exemple de graphique avec infobulle Voici un exemple de diagramme barre sur les données de mortalités. gg &lt;- ODD_indicateur311 %&gt;% filter(Type_Zone != &quot;Pays&quot;, Age_group==&quot;All age ranges or no breakdown by age&quot;, Sex==&quot;Both sexes or no breakdown by sex&quot;, Location==&quot;Total (national level)&quot;, is.na(Value_type) ) %&gt;% filter(Year %in% c(2015)) %&gt;% ggplot()+ geom_bar_interactive(aes(x=Country_or_Area_Name, weight=Value, fill=Country_or_Area_Name, tooltip=paste(Value,&quot;décès pour 100 000 naissances&quot;)))+ theme(legend.position=&quot;none&quot;, title=element_text(size=8), axis.text = element_text(size=7))+ scale_fill_ipsum()+ coord_flip()+ labs(title=&quot;Mortalité maternelle sur quelques zones du globe&quot;, subtitle=&quot;En 2015&quot;, y=&quot;Taux de mortalité de la mère \\n(pour 100 000 naissances)&quot;, x=&quot;Zone&quot;, fill=&quot;Zone&quot; ) girafe(ggobj=gg,height_svg = 3) L’infobulle peut contenir plusieurs informations. Il est aussi possible d’en changer l’apparence, grâce à différentes options à spécifier dans opts_tooltip: offx / offy : pour la position de l’info-bulle par rapport à l’élément css : pour modifier l’aspect de l’info-bulle. use_fill=TRUE : pour adapter le fond de l’info-bulle à la couleur de l’élément. gg &lt;- ggplot(data=ODD_graphique2)+ geom_line(aes(x=Year,y=Value))+ geom_point(aes(x=Year,y=Value))+ geom_point_interactive(aes(x=Year,y=Value, tooltip = paste(Year, &quot;\\n&quot;,Value,&quot;décès pour 100 000 naissances&quot;)))+ labs(title=&quot;Mortalité maternelle sur quelques zones du globe&quot;, subtitle=&quot;En 2015&quot;, y=&quot;Taux de mortalité de la mère \\n(pour 100 000 naissances)&quot;, x=&quot;Zone&quot;, fill=&quot;Zone&quot; )+ theme_minimal() girafe(ggobj=gg,height_svg = 3, options=list( opts_tooltip(css=&quot;background-color:gray;font-style:italic;border-radius:5px;padding:5px;&quot;))) Les éléments associés à data_id sont animés au survol de la souris. Ces animations sont configurées par les options suivantes: opts_hover : animation des éléments du graphique opts_hover_inv : animation sur le reste des éléments du graphique (estomper les autres éléments) opts_hover_key : animation des éléments de la légende opts_hover_theme : animation des éléments du thème gg &lt;- ODD_indicateur311 %&gt;% filter(Type_Zone != &quot;Pays&quot;, Age_group==&quot;All age ranges or no breakdown by age&quot;, Sex==&quot;Both sexes or no breakdown by sex&quot;, Location==&quot;Total (national level)&quot;, is.na(Value_type) ) %&gt;% filter(Year %in% c(2015)) %&gt;% ggplot()+geom_bar_interactive(aes(x=Country_or_Area_Name, weight=Value,fill=Country_or_Area_Name, tooltip=Value, data_id=Value))+ theme(legend.position=&quot;none&quot;, title=element_text(size=8), axis.text = element_text(size=7))+ scale_fill_ipsum()+ coord_flip()+ labs(title=&quot;Mortalité maternelle sur quelques zones du globe&quot;, subtitle=&quot;En 2015&quot;, y=&quot;Taux de mortalité de la mère \\n(pour 100 000 naissances)&quot;, x=&quot;Zone&quot;, fill=&quot;Zone&quot; ) girafe(ggobj=gg, height_svg = 3, options=list(opts_hover(css=&quot;cursor:grab;fill:red;stroke:blue;&quot;))) Il existe d’autres options tel que opts_zoom, opts_sizing, … 15.1.2 Les facettes {ggiraph} est compatible avec la réalisation des graphiques à facette gg&lt;-ODD_indicateur311 %&gt;% filter(Type_Zone != &quot;Pays&quot;, Age_group==&quot;All age ranges or no breakdown by age&quot;, Sex==&quot;Both sexes or no breakdown by sex&quot;, Location==&quot;Total (national level)&quot;, is.na(Value_type) ) %&gt;% filter(Year %in% c(2000,2005,2010,2015)) %&gt;% ggplot()+ geom_bar_interactive(aes(x=Country_or_Area_Name,weight=Value,fill=Country_or_Area_Name,tooltip=Value))+ theme(legend.position=&quot;none&quot;, title=element_text(size=8), axis.text = element_text(size=7))+ scale_fill_ipsum()+ coord_flip()+ labs(title=&quot;Mortalité maternelle sur quelques zones du globe&quot;, subtitle=&quot;En 2015&quot;, y=&quot;Taux de mortalité de la mère \\n(pour 100 000 naissances)&quot;, x=&quot;Zone&quot;, fill=&quot;Zone&quot; )+ theme(legend.position = &quot;none&quot;)+ facet_wrap(~Year) girafe(ggobj=gg) 15.2 Les cartes Leaflet Leaflet est au départ un package de cartographie réalisé en javascript. R permet de produire des cartes en exploitant cette librairie. Ci-dessous un exemple avancé de carte choroplète avec leaflet. data(&quot;World&quot;) tt &lt;- World %&gt;% rename(Country_or_Area_Code=iso_a3) %&gt;% left_join(ODD_indicateur311 %&gt;% filter(Age_group==&quot;All age ranges or no breakdown by age&quot;, Sex==&quot;Both sexes or no breakdown by sex&quot;, Type_Zone==&quot;Pays&quot;, is.na(Value_type)) %&gt;% group_by(Country_or_Area_Code) %&gt;% filter(!is.na(Value)) %&gt;% filter(Year==max(Year))) # création des quantiles de la variable d&#39;intérêt bins &lt;-quantile(tt$Value,na.rm=T) # création d&#39;une palette de couleurs associée pal &lt;- colorBin(&quot;YlOrRd&quot;, domain = tt$Value, bins = bins) #création d&#39;un label ad hoc à afficher en surbrillance au passage de la souris sur la carte. labels &lt;- sprintf( &quot;&lt;strong&gt;%s&lt;/strong&gt;&lt;br/&gt;%g décès pour 100 000 naissance en 2015&quot;, tt$name, tt$Value ) %&gt;% lapply(htmltools::HTML) leaflet(tt) %&gt;% addPolygons(data=tt, fillColor=~pal(Value), weight = 2, opacity = 1, color = &quot;white&quot;, dashArray = &quot;3&quot;, fillOpacity = 0.7, highlight = highlightOptions( weight = 5, color = &quot;#666&quot;, dashArray = &quot;&quot;, fillOpacity = 0.7, bringToFront = TRUE), label = labels, labelOptions = labelOptions( style = list(&quot;font-weight&quot; = &quot;normal&quot;, padding = &quot;3px 8px&quot;), textsize = &quot;15px&quot;, direction = &quot;auto&quot;)) Pour réaliser des ronds proportionnels, il va falloir là aussi créer un centroïde de nos polygones. ttc &lt;- st_centroid(tt) bins &lt;-quantile(ttc$Value,na.rm=T) pal &lt;- colorBin(&quot;YlOrRd&quot;, domain = ttc$Value, bins = bins) carte_rond_proportionnel &lt;- leaflet(ttc) %&gt;% addPolygons(data=tt, fillColor = &quot;#ffffff&quot;, opacity=.2, color = &quot;white&quot;, dashArray = &quot;3&quot;, fillOpacity = 0.7 ) %&gt;% addCircles(data=ttc, fillColor=~pal(Value), radius=~100000*log2(Value), weight = 2, opacity = 1, color = &quot;white&quot;, dashArray = &quot;3&quot;, fillOpacity = 0.7, highlight = highlightOptions( weight = 5, color = &quot;#666&quot;, dashArray = &quot;&quot;, fillOpacity = 0.7, bringToFront = TRUE), label = labels, labelOptions = labelOptions( style = list(&quot;font-weight&quot; = &quot;normal&quot;, padding = &quot;3px 8px&quot;), textsize = &quot;15px&quot;, direction = &quot;auto&quot;)) %&gt;% addLegend(&quot;bottomright&quot;, pal = pal, values = ~Value, title = &quot;Taux de décès des mères à la naissance&quot;, opacity = 1) carte_rond_proportionnel 15.3 Exporter une sortie html La fonction saveWidget() permet d’exporter une sortie d’un html Widget en html. saveWidget(widget = carte_rond_proportionnel, file = &quot;Taux de décès des mères à la naissance.html&quot;) 15.4 Exercice 7 Reprendre le nuage de point obtenu à partir des données ODD : taux de mortalité maternelle (Maternal_mortality_ratio) en fonction du produit intérieur brut (Gross_Domestic_Product_GDP) (Chapitre 9) Obtenir ce graphique pour le web avec des infos bulles regroupant le nom du continent, de la zone, le PIB et le taux de mortalité maternelle. Paramétrer la surbrillance du continent au survol d’élément. Le résultat attendu : "],["créer-des-tableaux-avec-kable-et-kable-extra.html", "Chapitre 16 Créer des tableaux avec kable et kable extra 16.1 Sauvegarde 16.2 Exercice 8", " Chapitre 16 Créer des tableaux avec kable et kable extra Kable permet de créer des tableaux de diffusion très simplement. Une très bonne documentation en anglais peut se trouver ici Ci-dessous un exemple. On reprend les données utilisées pour le diagramme barre. ODD_indicateur311 %&gt;% filter(Type_Zone != &quot;Pays&quot;, Age_group==&quot;All age ranges or no breakdown by age&quot;, Sex==&quot;Both sexes or no breakdown by sex&quot;, Location==&quot;Total (national level)&quot;, is.na(Value_type) ) %&gt;% group_by(Country_or_Area_Code) %&gt;% filter(Year==max(Year)) %&gt;% ungroup %&gt;% select(Country_or_Area_Name,Year,Value) %&gt;% setNames(c(&quot;Zone&quot;,&quot;Année&quot;,&quot;Nombre de décès pour 100 000 Naissance&quot;)) %&gt;% kable(&quot;html&quot;,caption=&quot;Mortalité de la mère à la naissance pour quelques grandes zones du globe&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;)) %&gt;% row_spec(1, bold = T, color = &quot;white&quot;, background = &quot;grey&quot;)%&gt;% add_indent(c(2:5)) (#tab:kabble_1)Mortalité de la mère à la naissance pour quelques grandes zones du globe Zone Année Nombre de décès pour 100 000 Naissance World 2015 216 Latin America and the Caribbean 2015 67 Southern Asia 2015 176 South-Eastern Asia 2015 110 Oceania (excluding Australia and New Zealand) 2015 187 Description des fonctions utilisées : setNames() permet de définir les libellés de colonnes ; kable(“html”) permet de produire une sortie html du tableau, l’option caption définit le titre ; kable_styling() permet de mettre un thème à notre tableau, ici on lui dit qu’on veut un tableau avec des lignes dont les couleurs alternent entre blanc et gris et un effet de surbrillance au passage de la souris ; row_spec() permet de définir des attributs particuliers pour des lignes. Ici, on lui dit qu’on veut une ligne 1 avec du gras, un fond gris et une police de couleur blanche. L’équivalent pour les colonnes est column_spec(); add_indent() permet de définir sur un vecteur de lignes (ici les lignes 2 à 5) une indentation. 16.1 Sauvegarde Le tableau ainsi produit peut être sauvegardé sous plusieurs formats (html, png, pdf, etc..) grâce à la fonction save_kable. Cette fonction nécessite le chargement du package magick ODD_indicateur311 %&gt;% filter(Type_Zone != &quot;Pays&quot;, Age_group==&quot;All age ranges or no breakdown by age&quot;, Sex==&quot;Both sexes or no breakdown by sex&quot;, Location==&quot;Total (national level)&quot;, is.na(Value_type) ) %&gt;% group_by(Country_or_Area_Code) %&gt;% filter(Year==max(Year)) %&gt;% ungroup %&gt;% select(Country_or_Area_Name,Year,Value) %&gt;% setNames(c(&quot;Zone&quot;,&quot;Année&quot;,&quot;Nombre de décès pour 100 000 Naissance&quot;)) %&gt;% kable(&quot;html&quot;,caption=&quot;Mortalité de la mère à la naissance pour quelques grandes zones du globe&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;)) %&gt;% row_spec(1, bold = T, color = &quot;white&quot;, background = &quot;grey&quot;)%&gt;% add_indent(c(2:5)) %&gt;% save_kable(&quot;montableau.png&quot;) 16.2 Exercice 8 Produire un tableau du nombre de logements collectifs et individuels (RPLS) par départements en région Centre-Val de Loire. Le résultat attendu : (#tab:kabble_3)Chiffres clés RPLS Zone Nombre de logements collectifs Nombre de logements individuels Cher 14434 7054 Eure-et-Loir 24462 7024 Indre 11533 6419 Indre-et-Loire 39030 9779 Loir-et-Cher 14632 6436 Loiret 37442 12671 Centre-Val de Loire 141533 49383 "],["ressources.html", "Chapitre 17 Ressources 17.1 dataviz 17.2 ggplot2 17.3 tmap 17.4 ggiraph 17.5 apexcharter 17.6 kable et kableExtra", " Chapitre 17 Ressources Quelques ressources de références 17.1 dataviz Dataviz project : http://datavizproject.com From data to viz : https://www.data-to-viz.com/ Dundamentals of datavisualisation : http://serialmentor.com/dataviz/ Datavizualisation - a practical introduction : http://socviz.co/ 17.2 ggplot2 La documentation du module : http://ggplot2.tidyverse.org/reference/ Cheatsheet : https://github.com/rstudio/cheatsheets/raw/master/data-visualization-2.1.pdf Top 50 ggplot2 visualisations : http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html 17.3 tmap La vignette du package Tmap : https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html Il y a quelques années, {tmap} était le package de cartographie le plus courant. Il a depuis était supplanté par {ggplot2}. Voici ce que proposait le support de formation de parcours-r à son sujet : 17.3.1 Cartographie avec tmap 17.3.1.1 Les cartes avec Tmap Tmap est un package dédié à la réalisation de cartes sous R. La syntaxe est très proche de ggplot, avec l’opérateur + pour enchaîner les options. L’équivalent des geom_xx() dans tmap sont les fonctions suivantes : tm_lines() : afficher des lignes tm_polygons() : afficher des polygones tm_raster() : afficher un raster tm_bubbles() : afficher des ronds proportionnels tm_markers() : afficher des marqueurs tm_text() : afficher du texte Pour charger une donnée géométrique, il faut utiliser la fonction *tm_shape(). Les différences : Les variables s’appellent avec des cotes \"\" Le facetting peut se faire sur un format de données large (une carte par colonne et non une carte par modalité d’une variable) La grande différence entre les tm_xx() et les geom_xx() : les tm_xx() inclut la définition des classes (nombre de classes, définition des classes et des palettes) sans passer par une fonction scale() dont l’équivalent n’existe pas. La mise en page se définit avec la fonction tm_layout(), la légende avec tm_legend(). 17.3.1.2 Exemple de carte choroplèthe data(&quot;World&quot;) tt&lt;-World %&gt;% rename(Country_or_Area_Code=iso_a3) %&gt;% inner_join(ODD_indicateur311 %&gt;% filter(Age_group==&quot;All age ranges or no breakdown by age&quot;, Sex==&quot;Both sexes or no breakdown by sex&quot;, Type_Zone==&quot;Pays&quot;, is.na(Value_type)) %&gt;% group_by(Country_or_Area_Code) %&gt;% filter(!is.na(Value)) %&gt;% filter(Year==max(Year))) tm_shape(tt %&gt;% filter(Year==2015))+ tm_polygons(&quot;Value&quot;) L’option n= permet de sélectionner le nombre de classes souhaitées, lorsque l’on réalise une carte sur une variable continue. tm_shape(tt %&gt;% filter(Year==2015))+ tm_polygons(&quot;Value&quot;,n=2) 17.3.1.3 Exemple de carte à ronds proportionnels tm_shape(tt %&gt;% filter(Year==2015))+ tm_polygons()+ tm_bubbles(size=&quot;Value&quot;,col=&quot;Value&quot;) 17.3.1.4 Exemples de cartes avec facet tm_shape(tt)+ tm_polygons(&quot;Value&quot;)+ tm_facets(&quot;Year&quot;) tm_shape(tt %&gt;% filter(Year==2015))+ tm_polygons(&quot;Value&quot;)+ tm_facets(&quot;Continent&quot;) 17.3.1.5 Gestion des palettes La fonction tmaptools::palette_explorer() permet d’accéder à une interface très simple de définition d’une palette de couleurs à partir des palettes brewer. tm_shape(tt %&gt;% filter(Year==2015))+ tm_polygons(&quot;Value&quot;,palette=get_brewer_pal(&quot;OrRd&quot;, n = 5, contrast = c(0.2, 1))) On peut également utiliser n’importe quelle palette. Par exemple, la palette viridis, mais sans l’interface proposée par palette_explorer() : tm_shape(tt %&gt;% filter(Year==2015))+ tm_polygons(&quot;Value&quot;,palette=viridis(5, alpha = 1, begin = 0, end = 1, direction = 1, option = &quot;D&quot;)) 17.3.1.6 La mise en page tm_layout() permet de contrôler les polices, la légende, les marges, les couleurs. L’option design.mode=T permet de voir visuellement les marges, la position de la légende. Le titre de la légende ne se définit pas dans tm_layout(), mais dans tm_polygons(). L’option title de ces fonctions est l’équivalent d’un libellé de la variable mise dans l’aesthetic. tm_shape(tt %&gt;% filter(Year==2015))+ tm_polygons(&quot;Value&quot;,palette=viridis(5, alpha = 1, begin = 0, end = 1, direction = 1, option = &quot;D&quot;), title=&quot;Taux de mortalité de la mère \\n(pour 100 000 naissances)&quot;)+ tm_layout(main.title=&quot;Taux de mortalité de la mère \\n(pour 100 000 naissances) dans le monde&quot;, main.title.size=1.2, outer.margins=c(0,0,0,0), legend.position=c(&quot;left&quot;,&quot;bottom&quot;), legend.outside = F, main.title.position = &quot;center&quot;, inner.margins = c(0, 0, 0, 0)) Avec les cartes en ronds proportionnels, on peut spécifier un titre pour la couleur et la taille du rond. tm_shape(tt %&gt;% filter(Year==2015))+ tm_polygons()+ tm_bubbles(size=&quot;Value&quot;,col=&quot;Value&quot;, palette=viridis(5, alpha = 1, begin = 0, end = 1, direction = 1, option = &quot;D&quot;), title.col=&quot;&quot;, title.size=&quot;Taux de mortalité de la mère \\n(pour 100 000 naissances)&quot;)+ tm_layout(main.title=&quot;Taux de mortalité de la mère \\n(pour 100 000 naissances) dans le monde&quot;, main.title.size=1.2, outer.margins=c(0,0,0,0), legend.position=c(&quot;left&quot;,&quot;bottom&quot;), legend.outside = F, main.title.position = &quot;center&quot;, inner.margins = c(0, 0, 0, 0)) 17.3.1.7 Export d’un graphique La fonction tmap_save() permet d’exporter une carte tmap en un fichier image. carte&lt;-tm_shape(tt %&gt;% filter(Year==2015))+ tm_polygons()+ tm_bubbles(size=&quot;Value&quot;,col=&quot;Value&quot;, palette=viridis(5, alpha = 1, begin = 0, end = 1, direction = 1, option = &quot;D&quot;), title.col=&quot;&quot;, title.size=&quot;Taux de mortalité de la mère \\n(pour 100 000 naissances)&quot;)+ tm_layout(main.title=&quot;Taux de mortalité de la mère \\n(pour 100 000 naissances) dans le monde&quot;, main.title.size=1.2, outer.margins=c(0,0,0,0), legend.position=c(&quot;left&quot;,&quot;bottom&quot;), legend.outside = F, main.title.position = &quot;center&quot;, inner.margins = c(0, 0, 0, 0)) tmap_save(carte, filename=&quot;figures/Taux de mortalité de la mère dans le monde.png&quot;) 17.4 ggiraph La documentation du module : https://davidgohel.github.io/ggiraph/index.html 17.5 apexcharter Le site web du module : https://dreamrs.github.io/apexcharter/index.html 17.6 kable et kableExtra Créer de super tableaux avec kabble et kableExtra : https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html "],["exercices-et-corrections.html", "Chapitre 18 Exercices et corrections 18.1 Exercice 1 18.2 Exercice 2 18.3 Exercice 3 18.4 Exercice 4 18.5 Exercice 5 18.6 Exercice 6 18.7 Exercice 7 18.8 Exercice 8", " Chapitre 18 Exercices et corrections 18.1 Exercice 1 À partir des données de la table rpls_aggrege_large (dans le data_exercices_formation.RData), créer un nuage de points (un point par EPCI) entre : le % de parc social de moins de 5 ans; et le pourcentage de logement avec un DPE GES de classe A, B ou C; et une couleur différente pour distinguer les EPCI de la région PDL. ggplot(data = rpls_aggrege_large %&gt;% filter(TypeZone==&quot;Epci&quot;)) + geom_point(aes(x=Parc_de_moins_de_5_ans_pourcent, y=DPE_GES_classe_ABC_pourcent, color=epci_2017_52), alpha=.5, size=.5 ) 18.2 Exercice 2 Reprendre le nuage de points obtenu à partir des données ODD : taux de mortalité maternelle (Maternal_mortality_ratio) en fonction du produit intérieur brut (Gross_Domestic_Product_GDP) (Chapitre 7.1) En modifier le thème : Insérer un titre, de couleur, en gras, centré par rapport au graphe Indiquer la source (ODD) et modifier sa taille Changer les titres des axes et leurs tailles Modifier la couleur de fond du graphe Modifier le type de quadrillage (pointillés) ggplot(ODD_graphique1) + geom_point(aes(x=log(Gross_Domestic_Product_GDP), y=log(Maternal_mortality_ratio), color=Continent))+ labs(title=&quot;Croisement du PIB avec le taux de mortalité maternelle&quot;, y=&quot;Taux de mortalité maternelle&quot;, x=&quot;Produit Intérieur Brut&quot;, caption=&quot;Source: ODD&quot;)+ theme(plot.title=element_text(size=15, face=&quot;bold&quot;, color=&quot;blue&quot;, hjust=0.5), plot.caption=element_text(size=15), axis.title.x=element_text(size=15), axis.title.y=element_text(size=15), panel.background = element_rect(fill = &quot;lightblue&quot;,colour = &quot;lightblue&quot;,size = 0.5), panel.grid.major = element_line( size=0.5,linetype = &quot;dotted&quot;), panel.grid.minor = element_line( size=0.5,linetype = &quot;dotted&quot;)) 18.3 Exercice 3 En réutilisant le graphe obtenu à l’exercice 1, y rajouter: une palette brewer pour la couleur ; la légende en bas ; des libellés (axes et légende) parlant et un titre. ggplot(data = rpls_aggrege_large %&gt;% filter(TypeZone==&quot;Epci&quot;)) + geom_point(aes(x=Parc_de_moins_de_5_ans_pourcent, y=DPE_GES_classe_ABC_pourcent, color=epci_2017_52), size=.7 )+ scale_color_brewer(type=qual,palette=&quot;Paired&quot;, labels=c(&quot;Autres Epci&quot;,&quot;Epci de la région Pays de la Loire&quot;))+ scale_x_continuous(limits = c(0,40))+ scale_y_continuous(limits = c(0,80))+ theme(legend.position = &quot;bottom&quot;)+ labs(title=&quot;Répartition des Epci en fonction \\nde la part des logements ayant une étiquette A,B,C et de la part du parc récent&quot;, x=&quot;Part du parc de moins de 5 ans&quot;, y=&quot;Part des logements ayant une étiquette A,B,C&quot;, color=&quot;&quot;) 18.4 Exercice 4 Facette sur un diagramme barre avec : en variable discrète les régions en variables continues les indicateurs suivants : % de logements de 3 et 4 pièces % DPE énergie A,B,C % DPE GES A,B,C % de parc de moins de 5 ans une façon d’identifier la région Pays de la Loire Pour avoir la liste des modalités dune variable : Variables caractères ou factorielles : unique(rpls_aggrege$Indicateur) Variables factorielles : levels(rpls_aggrege$Indicateur) rpls_aggrege %&gt;% filter(TypeZone==&quot;Régions&quot;, Indicateur %in% c(&quot;3 et 4 pièces_pourcent&quot;, &quot;DPE GES classe ABC_pourcent&quot;, &quot;DPE énergie classe ABC_pourcent&quot;, &quot;Parc de moins de 5 ans_pourcent&quot;)) %&gt;% mutate(Indicateur=fct_recode(Indicateur, `Logements de 3 et 4 pièces`=&quot;3 et 4 pièces_pourcent&quot;, `Logements avec DPE énergie de classe A,B,C`=&quot;DPE énergie classe ABC_pourcent&quot;, `Logements avec DPE GES de classe A,B,C`=&quot;DPE GES classe ABC_pourcent&quot;, `Logements social de moins de 5 ans`=&quot;Parc de moins de 5 ans_pourcent&quot;), r52=ifelse(Reg_2017==&quot;52&quot;,1,0)) %&gt;% ggplot()+ #On utilise l&#39;indicatrice de la région Pays de la Loire pour mapper la transparence geom_bar(aes(x=nReg_2017,weight=Valeur,fill=Indicateur,alpha=r52))+ coord_flip()+ theme_minimal()+ scale_fill_ipsum()+ #On défini les valeurs maximum et minimum de transparence que l&#39;on veut voir scale_alpha_continuous(range=c(.65,1))+ facet_wrap(~Indicateur)+ theme(legend.position=&quot;none&quot;)+ labs(title=&quot;mon premier facet&quot;,y=&quot;En % du parc social&quot;,x=&quot;&quot;) 18.5 Exercice 5 Produire une carte du Loiret à l’EPCI du taux de logements collectifs dans le parc locatif social. tt &lt;- Carte_EPCI_France %&gt;% filter(CODE_DEPT==&quot;45&quot;) %&gt;% left_join(rpls_aggrege) %&gt;% filter(Indicateur==&quot;Logements collectifs_pourcent&quot;) ggplot(data=tt)+ geom_sf(aes(geometry=geometry, fill=Valeur))+ labs(title=&quot;Taux de logements collectifs par EPCI&quot;,subtitle=&quot;Département du Loiret&quot;)+ theme( axis.text.x = element_blank(), axis.text.y = element_blank(), axis.ticks = element_blank()) 18.6 Exercice 6 A partir du fichier rpls_aggrege_large.RData, réaliser un graphique en barre représentant la répartition des DPE par classe (en %). Le graphique sera animé par département, uniquement pour ceux de la région Centre-Val de Loire. library(dplyr) library(ggplot2) library(gganimate) rpls &lt;- rpls_aggrege_large %&gt;% #Filtre sur la zone de travail souhaitée filter(TypeZone==&quot;Départements&quot; &amp; nReg_2017==&quot;Centre-Val de Loire&quot;)%&gt;% #Suppression des levels non présents dans la table, #ce qui évite de générer des graphes vident pour les départements hors Centre-Val de Loire mutate(nDep_2017=fct_drop(nDep_2017)) %&gt;% #Selection des variables nécessaires select(nDep_2017,DPE_energie_classe_ABC_pourcent,DPE_energie_classe_D_pourcent, DPE_energie_classe_EFG_pourcent,DPE_energie_classe_NA_pourcent) %&gt;% #Passage de la table au format long (cf module 2, chapitre 7) pivot_longer(-c(nDep_2017),names_to =&quot;variable&quot;,values_to =&quot;valeur&quot; ) %&gt;% #Retravail des intitulés pour ne conserver que la classe d&#39;energie ABC/D/EGF/NA mutate(variable=str_remove(pattern = &quot;DPE_energie_classe_&quot;,variable), variable=str_remove(pattern = &quot;_pourcent&quot;,variable)) ggplot(data=rpls, aes(x=variable, y=valeur,fill=variable)) + geom_bar(stat=&quot;identity&quot;)+ #definition des couleurs scale_fill_manual(values=c(&quot;#66CD00&quot;, &quot;#FFFF00&quot;, &quot;#FF7F00&quot;, &quot;#A8A8A8&quot;))+ #suppression de la legende theme(legend.position=&quot;none&quot;)+ #habillage: titre, libellé des axes, Source labs(title=&quot;Les DPE dans le parc locatif social&quot;, subtitle=&quot;En {closest_state}&quot;, x=&quot;Classe d&#39;énergie&quot;, y=&quot;%&quot;, caption=&quot;Source : Répertoire Locatif Social&quot;)+ #création de l&#39;animation transition_states(states=nDep_2017, transition_length = 1, state_length = 5) 18.7 Exercice 7 Reprendre le nuage de point obtenu à partir des données ODD :taux de mortalité maternelle (Maternal_mortality_ratio) en fonction du produit intérieur brut (Gross_Domestic_Product_GDP) (Chapitre 9) Obtenir ce graphique pour le web avec des infos bulles regroupant le nom du continent, de la zone, le PIB et le taux de mortalité maternelle. Paramètrer la surbrillance du continent au survol d’élément. Le résultat attendu : gg&lt;-ggplot(ODD_graphique1) + geom_point_interactive(aes(x=log(Gross_Domestic_Product_GDP), y=log(Maternal_mortality_ratio), color=Continent, data_id=Continent, tooltip=paste(Continent,&quot;\\n&quot;,Parent_Zone_libelle, &quot;\\nPIB de&quot;,round(Gross_Domestic_Product_GDP,1), &quot;\\nun taux de mortalié maternelle de&quot;,Maternal_mortality_ratio, &quot;(pour 100 000 naissances)&quot;)))+ scale_color_brewer(type=&quot;qual&quot;) girafe(ggobj=gg,height_svg = 3,options=list(opts_hover(css=&quot;fill:darkblue;&quot;))) 18.8 Exercice 8 Produire un tableau du nombre de logements collectifs et individuels (RPLS) par départements en région Centre-Val de Loire. rpls_DEP_R24 &lt;- rpls_aggrege_large %&gt;% filter(TypeZone %in% c(&quot;Départements&quot;,&quot;Régions&quot;),nReg_2017==&quot;Centre-Val de Loire&quot;) %&gt;% arrange(TypeZone,Zone) %&gt;% select(Zone,Logements_collectifs,Logements_individuels)%&gt;% setNames(c(&quot;Zone&quot;,&quot;Nombre de logements collectifs&quot;,&quot;Nombre de logements individuels&quot;)) %&gt;% kable(&quot;html&quot;,caption=&quot;Chiffres clés RPLS&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;)) %&gt;% row_spec(7, bold = T, color = &quot;white&quot;, background = &quot;grey&quot;) rpls_DEP_R24 (#tab:exo_10)Chiffres clés RPLS Zone Nombre de logements collectifs Nombre de logements individuels Cher 14434 7054 Eure-et-Loir 24462 7024 Indre 11533 6419 Indre-et-Loire 39030 9779 Loir-et-Cher 14632 6436 Loiret 37442 12671 Centre-Val de Loire 141533 49383 "]]
